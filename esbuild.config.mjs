import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import sveltePlugin from 'esbuild-svelte';
import { sveltePreprocess } from 'svelte-preprocess';
import fs from 'node:fs';
import { minify } from 'terser';
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD AND TERSER
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const terserOpt = {
  sourceMap: !prod
    ? {
        url: 'inline',
      }
    : {},
  format: {
    indent_level: 2,
    beautify: true,
    comments: 'some',
    ecma: 2018,
    preamble: banner,
    webkit: true,
  },
  parse: {
    // parse options
  },
  compress: {
    // compress options
    defaults: false,
    evaluate: true,
    inline: 3,
    join_vars: true,
    loops: true,
    passes: 4,
    reduce_vars: true,
    reduce_funcs: true,
    arrows: true,
    collapse_vars: true,
    comparisons: true,
    lhs_constants: true,
    hoist_props: true,
    side_effects: true,
    ecma: 2018,
    if_return: true,
    unused: true,
  },
  mangle: false,
  ecma: 2018, // specify one of: 5, 2015, 2016, etc.
  enclose: false, // or specify true, or "args:values"
  keep_classnames: true,
  keep_fnames: true,
  ie8: false,
  module: false,
  safari10: false,
  toplevel: false,
};

/** @type esbuild.Plugin[] */
const plugins = [
  {
    name: 'my-plugin',
    setup(build) {
      build.onEnd(async (result) => {
        if (prod) {
          console.log('tersering...');
          const src = fs.readFileSync('./main_org.js').toString();
          // @ts-ignore
          const ret = await minify(src, terserOpt);
          if (ret && ret.code) {
            fs.writeFileSync('./main.js', ret.code);
          }
        } else {
          fs.copyFileSync('./main_org.js', './main.js');
        }
        console.log('tersered...');
      });
    },
  },
];

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  platform: 'browser',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'main_org.js',
  plugins: [
    sveltePlugin({
      preprocess: sveltePreprocess({
        preserveComments: false,
        compilerOptions: {
          removeComments: true,
        },
      }),
      compilerOptions: {
        css: 'injected',
        preserveComments: false,
        preserveWhitespace: false,
      },
    }),
    ...plugins,
  ],
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
